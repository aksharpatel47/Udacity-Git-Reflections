When would you want to use a remote repository rather than keeping all your work
local?

    A remote repository is extremely helpful when working in teams. People can access
    each others work and keep on working even when not connected to the internet.
    Also, even when working alone, a remote repository is a nice way to backup
    the work done. Certain git repository hosting services such as Github,
    Gitlab and Bitbucket offer a nice UI to manage and visualize the
    repository and the overall project.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Git when used locally doesn't use the internet. We can continue adding
    our changes to the repo even when we're offline. This can mean that
    the changes can get more and more significant with each commit.
    If Git is set to automatically stay up-to-date with the remote
    repository, it is very much possible that conflicts in files
    will be encountered. When we're trying to solve a particular
    problem, we would want our entire attention on the problem.
    Having a constant distraction and fear of conflicts within
    files automatically synced by git, would mean lesser
    productivity. Git would then become an enemy of the
    programmers instead of a friend which is currently
    is.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branches : To be used when we want to create modifications on our own code
    while keeping the original branch intact. This branch can then be used
    to implement the changes and test them. Once we are confident that the
    changes need to be applied to the original branch we merge them.
    
    Clones: This is usually used to make a local copy of git repository. We
    can clone from either a local repository or a repository hosted on
    a network.
    
    Forks: This is a github specific clone. When we fork a repository, it
    creates a clone of the repository on our github profile while keeping
    reference to the original repository. Github also keeps track of
    these forks.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Having a local copy of the last known state, allows us to make a good guess
    on whether the changes we're making will conflict once a merge is
    implemented. It also allows us to see what the team has been
    working on and the changes they implemented upto the last
    known state without the internet.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    After learning how to use git and github, I cannot image my life writing software
    without them. Collaborating through cavemen mechanisms does not seem to be an
    option anymore. Life without them would definitely be harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Separate branch can be extremely useful when used to track features that are experimental
    and can be tried and tested by other users before being merged into the the master/stable
    branch. Having a branch allows others to view your changes, pull them down to their
    local copy, test it and keep it as a reference for any changes they would want to
    implement. Using just the master branch for all changes can lead to large number
    of conflicts. In large teams, it would be beneficial to use forks or branches
    to publish changes which can them be merged through pull requests.
